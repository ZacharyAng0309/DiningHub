@using DiningHub.Helpers
@model PaginatedList<DiningHub.Models.Feedback>

@{
    ViewData["Title"] = "Manage Feedback";
}

<div class="container-fluid shadow rounded-3 mb-5 bg-white">

    <div class="table-wrapper">
        <div class="table-title">
            <div class="row d-flex justify-content-between align-items-center">
                <div class="col-sm-3">
                    <h2>Manage Feedback</h2>
                </div>
                <div class="col-sm-6">
                    <form method="get" action="" class="d-flex justify-content-center">
                        <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control rounded-pill me-2" placeholder="Search feedback..." />
                        <button type="submit" class="btn btn-primary rounded-pill">Search</button>
                    </form>
                </div>
            </div>
        </div>
        <table class="table table-hover table-bordered">
            <thead class="table-danger text-center">
                <tr>
                    <th>
                        <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" class="text-black">Date</a>
                    </th>
                    <th>User</th>
                    <th>Comments</th>
                    <th>
                        <a asp-action="Index" asp-route-sortOrder="@ViewData["RatingSortParm"]" class="text-black">Rating</a>
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var feedback in Model)
                {
                    <tr>
                        <td class="align-middle">@feedback.Date.ToString("g")</td>
                        <td class="align-middle">@feedback.User.UserName</td>
                        <td class="align-middle">@feedback.Comments</td>
                        <td class="align-middle text-center">@feedback.Rating</td>
                        <td class="align-middle text-center">
                            <a asp-action="Details" asp-route-id="@feedback.FeedbackId" class="btn btn-info rounded-pill" data-bs-toggle="modal" data-bs-target="#detailsModal-@feedback.FeedbackId">Details</a>
                            <form method="post" asp-action="Delete" asp-route-id="@feedback.FeedbackId" class="d-inline">
                                <button type="submit" class="btn btn-danger rounded-pill" onclick="return confirm('Are you sure you want to delete this feedback?');">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="d-flex justify-content-center">
        <nav>
            <ul class="pagination">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=@(Model.PageIndex - 1)@(string.IsNullOrEmpty(ViewData["CurrentSort"]?.ToString()) ? "" : "&sortOrder=" + ViewData["CurrentSort"])@(string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()) ? "" : "&searchString=" + ViewData["CurrentFilter"])">Previous</a>
                    </li>
                }
                @for (var i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a class="page-link" href="?page=@i@(string.IsNullOrEmpty(ViewData["CurrentSort"]?.ToString()) ? "" : "&sortOrder=" + ViewData["CurrentSort"])@(string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()) ? "" : "&searchString=" + ViewData["CurrentFilter"])">@i</a>
                    </li>
                }
                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=@(Model.PageIndex + 1)@(string.IsNullOrEmpty(ViewData["CurrentSort"]?.ToString()) ? "" : "&sortOrder=" + ViewData["CurrentSort"])@(string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()) ? "" : "&searchString=" + ViewData["CurrentFilter"])">Next</a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<!-- Modal Templates -->
@foreach (var feedback in Model)
{
    <div class="modal fade" id="detailsModal-@feedback.FeedbackId" tabindex="-1" aria-labelledby="detailsModalLabel-@feedback.FeedbackId" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="detailsModalLabel-@feedback.FeedbackId">Details - From username:  @feedback.User.UserName</h5>
                </div>
                <div class="modal-body table-hover">
                    <h2 class="mb-3">Feedback Details</h2>
                    <hr />
                    <dl class="row">
                        <dt class="col-sm-3">User</dt>
                        <dd class="col-sm-9">@feedback.User.UserName</dd>
                        <dt class="col-sm-3">Comments</dt>
                        <dd class="col-sm-9">@feedback.Comments</dd>
                        <dt class="col-sm-3">Rating</dt>
                        <dd class="col-sm-9">@feedback.Rating</dd>
                        <dt class="col-sm-3">Date</dt>
                        <dd class="col-sm-9">@feedback.Date.ToString("g")</dd>
                    </dl>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button type="button" class="btn btn-secondary rounded-pill col-6" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

